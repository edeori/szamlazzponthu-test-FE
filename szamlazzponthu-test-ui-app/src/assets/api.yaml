openapi: 3.0.0
info:
  title: Usr API
  version: 1.0.0
  description: CRUD műveletek a Usr erőforráson.
servers:
  - url: http://localhost:8080

paths:
  /users:
    get:
      tags: [Users]
      summary: Userek listázása
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Sikeres lekérdezés
          headers:
            X-Total-Count:
              description: Összes találat száma a szűrés figyelembevételével
              schema: { type: integer, minimum: 0 }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Usr' }
        '400':
          $ref: '#/components/responses/ValidationError'

    post:
      tags: [Users]
      summary: Új user létrehozása
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UsrCreate' }
      responses:
        '201':
          description: Létrehozva
          headers:
            Location:
              description: Az új erőforrás elérési útja
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Usr' }
        '400':
          $ref: '#/components/responses/ValidationError'

  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [Users]
      summary: User lekérdezése azonosító alapján
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Usr' }
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Users]
      summary: User teljes frissítése (replace)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UsrPut' }
      responses:
        '200':
          description: Frissítve
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Usr' }
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Users]
      summary: User törlése
      responses:
        '204':
          description: Törölve (nincs tartalom)
        '404':
          $ref: '#/components/responses/NotFound'

components:
  parameters:
    UserId:
      name: id
      in: path
      required: true
      description: User azonosító
      schema:
        type: integer
        format: int64
        minimum: 1
    Limit:
      name: limit
      in: query
      required: false
      description: Visszaadott rekordok száma
      schema:
        type: integer
        default: 50
        minimum: 1
        maximum: 200
    Offset:
      name: offset
      in: query
      required: false
      description: Hány rekord kihagyása a lista elejéről
      schema:
        type: integer
        default: 0
        minimum: 0

  responses:
    NotFound:
      description: Nem található
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    ValidationError:
      description: Hibás kérés / validációs hiba
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ValidationError' }

  schemas:
    Usr:
      type: object
      required: [id, firstname, lastname, address, telephone, active, job]
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        firstname:
          type: string
          minLength: 2
          maxLength: 64
        lastname:
          type: string
          minLength: 2
          maxLength: 64
        address:
          type: string
          minLength: 0
          maxLength: 128
        telephone:
          type: string
          minLength: 0
          maxLength: 128
        active:
          type: boolean
        job:
          type: string
          minLength: 1
          maxLength: 120

    UsrCreate:
      type: object
      required: [firstname, lastname, address, telephone, active, job]
      properties:
        firstname: { type: string, minLength: 2, maxLength: 64 }
        lastname:  { type: string, minLength: 2, maxLength: 64 }
        address:   { type: string, minLength: 0, maxLength: 128 }
        telephone: { type: string, minLength: 0, maxLength: 128 }
        active:    { type: boolean }
        job:       { type: string, minLength: 1, maxLength: 120 }

    UsrPut:
      allOf:
        - $ref: '#/components/schemas/UsrCreate'

    Error:
      type: object
      properties:
        error: { type: string }
        message: { type: string }

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            details:
              type: array
              items:
                type: object
                properties:
                  field: { type: string }
                  issue: { type: string }
